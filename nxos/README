NxOS - an open source alternative operating system for the Lego Mindstorms NXT
==============================================================================

Summary:

 1. Introduction
 2. Requirements
 3. Building and testing
 4. Notes and FAQ


1. Introduction
^^^^^^^^^^^^^^^

NxOS is an open source operating system that runs on the Lego Mindstorms NXT
platform. It aims at providing a comprehensive base system that provides
easy-to-use APIs to the NXT's hardware, including sensors, display and motors.

It also contains some libraries that developers of /application kernels/ may find
of some interest, such as a file system or a GUI builder.

NxOS is written in C, and must be cross-compiled to the ARM platform. See section 2
below for the building requirements.


2. Requirements
^^^^^^^^^^^^^^^
The goal for NxOS is to have a cross-platform hosting (development) environment.
A basic setup would include:
  * Integrated Development Environment (Eclipse)
  * ARM Cross-Compiler Toolchain (GNU GCC)
  * Host-based GDB Server (Python-based) and Client (GDB for ARM)
  * Firmware Downloading Tool (NeXT Tool [GUI] or NeXTTool [CLI] from brixcc.sourceforge.net)

Building and testing NxOS requires a few software packages and libraries. Since most of
the external utilities are written in Python, you will need a working installation
of Python (www.python.org). Python 2.7 (not 3.x) is recommended, especially for 
the Mac OSX platform if remote debugging using GDB is desired.

On Mac OSX (and Windows?), the following packages are needed:
  * LEGO Mindstorms Fantom Drivers
  * Python >= 2.7 (not 3.x)
  * pyfantom
  * nxt-python >= 2.1.0

On Linux platforms, the following packages are needed:
  * Python >= 2.4 (not 3.x)
  * libusb
  * python-pyusb
  * PyBluez (if you want to upload/boot from the enhanced fw using bluetooth)
  * nxt-python >= 2.1.0


NeXT Tool (available from the brixcc website) by John Hansen is available for 
Windows, Mac OSX and Linux for uploading firmware and files to the NXT. It has 
a GUI interface and is probably the most stable tool for this purpose currently.
A Command line version (NeXTTool) is also available.

Alternatively, command line tools written in Python are provided with NxOS to 
perform similar firmware uploading and control tasks, but is no longer actively
supported. PyNXT is used to upload an NxOS kernel to the brick.

To ease the process of setuping a working ARM cross-compilation chain,
you will find in the scripts/ directory an automatic fetcher/builder :

  % mkdir -p ~/arm-gcc/
  % cd $_
  % ~/where/is/nxos/scripts/build-arm-toolchain.sh
  [...]

Don't forget to add ~/arm-gcc/install/bin to your PATH environment variable.

For MacOS X (>= 10.5.x) users, don't forget to install the Lego
driver Leopard update from the Lego software updates page, or you
won't be able to communicate with the brick via USB.

3. Building and testing
^^^^^^^^^^^^^^^^^^^^^^^

To build NxOS, simply go inside the nxos/ subdirectory (the one
that contains base/, systems/, ...) and type:

  % scons appkernels=tests

Finally, connect the brick to your computer with the USB cable, and do:

  % ./boot_firmware

The script will then ask you for the kernel to upload, and then upload the
firmware to the brick's RAM, ROM (flash) or to RAM of the enhanced
NXT-standard-firmware from John Hansen (available where brixcc is available).

To upload using RAM (kernel_samba.bin) or flash (kernel_rom.bin) the NXT must
be in SAMBA-mode, which is achieved pressing the button in the hole below the
USB-port (using a LEGO-antenna or such). To upload to the enhanced firmware
(kernel.rxe), you have to install the enhanced firmware from John Hansen. This
gives the advantage that the NxOS-kernel is stored like any other program on
the NXT and you can still use NXT-G, NBC witout the need to reflash the
firmware. The disadvantage is, that you will have less RAM available for your
program, because the program is started in RAM (as when you are uploading a
kernel_samba.bin).

To build and try another kernel, simply replace 'tests' by the name
of the application kernel you want to build. The available kernels
are the directory in systems/. You can also build several appkernels at
once by using a comma-separated list. Once scons is called with appkernel=xyz,
you only have to invoke scons without any arguments, because the options to
scons are stored in a file namend scons.options.

4. Notes and FAQ
^^^^^^^^^^^^^^^^

NxOS was started by David Anderson (http://www.natulte.net) and other collaborators in 2007.
It is a ground-up development of a reusable OS base for the Mindstorm NXT platform.
There are some architectural similarilties to LeJOS but most of the drivers have been rewritten.

Currently NxOS only has the base layer (hardware initialization, interrupt handlers, and drivers).
There is no scheduler provided so all programs execute in bare-metal mode using a hand-crafted event loop. 

Debugging support is provided via a GDB stub implemented in the firmware. Communications is over USB, there
is no need for any additional hardware (JTAG) debugging equipment. The only caveat is that Interrupt code
cannot be stepped through safely, since the debugger uses Undefined Instructions to trigger itself.
(Note: stepping and setting breakpoints is not working yet in BETA 1).
